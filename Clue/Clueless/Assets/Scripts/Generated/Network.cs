// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Network.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Network.proto</summary>
public static partial class NetworkReflection {

  #region Descriptor
  /// <summary>File descriptor for Network.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static NetworkReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1OZXR3b3JrLnByb3RvIjMKEUNyZWF0ZUdhbWVSZXF1ZXN0EhAKCHBsYXll",
          "cklEGAEgASgFEgwKBG5hbWUYAiABKAkiQAoOQ29ubmVjdFJlcXVlc3QSEAoI",
          "cGxheWVySUQYASABKAUSDAoEbmFtZRgCIAEoCRIOCgZnYW1lSUQYAyABKAUi",
          "NAoQU3RhcnRHYW1lUmVxdWVzdBIQCghwbGF5ZXJJRBgBIAEoBRIOCgZnYW1l",
          "SUQYAiABKAUiSwoETW92ZRIQCghwbGF5ZXJJRBgBIAEoBRIQCghsb2NhdGlv",
          "bhgCIAEoBRIPCgdzdXNwZWN0GAMgASgFEg4KBndlYXBvbhgEIAEoBSJeCg9E",
          "aXNwcm92ZVJlcXVlc3QSEAoIcGxheWVySUQYASABKAUSDgoGZ2FtZUlEGAIg",
          "ASgFEgwKBGNhcmQYAyABKAUSGwoTZGlzcHJvdmluZ0NoYXJhY3RlchgEIAEo",
          "BSIyCg5IaXN0b3J5UmVxdWVzdBIQCghwbGF5ZXJJRBgBIAEoBRIOCgZnYW1l",
          "SUQYAiABKAUiRAoPUGxheWVyQ2hhcmFjdGVyEhAKCHBsYXllcklEGAEgASgF",
          "EhEKCWNoYXJhY3RlchgCIAEoBRIMCgRuYW1lGAMgASgJIkMKDEluaXRpYXRl",
          "R2FtZRINCgVjYXJkcxgBIAMoBRIkCgpjaGFyYWN0ZXJzGAIgAygLMhAuUGxh",
          "eWVyQ2hhcmFjdGVyIiEKEFByb21wdFRvRGlzcHJvdmUSDQoFY2FyZHMYASAD",
          "KAUieQoKUGxheWVyVHVybhIQCghwbGF5ZXJJRBgBIAEoBRIMCgRyb29tGAIg",
          "ASgFEg8KB3N1c3BlY3QYAyABKAUSDgoGd2VhcG9uGAQgASgFEhgKEGRpc3By",
          "b3ZpbmdQbGF5ZXIYBSABKAUSEAoIbG9jYXRpb24YBiABKAUipAIKCkdhbWVV",
          "cGRhdGUSDgoGZ2FtZUlEGAEgASgFEhAKCHBsYXllcklEGAIgASgFEg4KBm51",
          "bWJlchgDIAEoBRIeCgR0eXBlGAQgASgOMhAuR2FtZVVwZGF0ZS5UeXBlEh8K",
          "CGluaXRpYXRlGAUgASgLMg0uSW5pdGlhdGVHYW1lEiEKBnByb21wdBgGIAEo",
          "CzIRLlByb21wdFRvRGlzcHJvdmUSGQoEdHVybhgHIAEoCzILLlBsYXllclR1",
          "cm4SEAoIZGlzcHJvdmUYCCABKAUiUwoEVHlwZRIMCghJTklUSUFURRAAEgoK",
          "BlBST01QVBABEggKBFRVUk4QAhILCgdDT05ORUNUEAMSDAoITkVYVFRVUk4Q",
          "BBIMCghESVNQUk9WRRAFIisKC0dhbWVIaXN0b3J5EhwKB3VwZGF0ZXMYASAD",
          "KAsyCy5HYW1lVXBkYXRlIjMKD0Fja25vd2xlZGdlbWVudBIPCgdzdWNjZXNz",
          "GAEgASgIEg8KB21lc3NhZ2UYAiABKAkiSwoKQWNjdXNhdGlvbhIQCghwbGF5",
          "ZXJJZBgBIAEoBRISCgppc0FjY3VzaW5nGAIgASgIEhcKCGFjY3VzaW5nGAMg",
          "ASgLMgUuTW92ZSIlChJBY2N1c2F0aW9uUmVzcG9uc2USDwoHY29ycmVjdBgB",
          "IAEoCCIlChFEaXNjb25uZWN0UmVxdWVzdBIQCghwbGF5ZXJJZBgBIAEoBTKM",
          "AwoOTmV0d29ya1NlcnZpY2USLwoKY3JlYXRlR2FtZRISLkNyZWF0ZUdhbWVS",
          "ZXF1ZXN0GgsuR2FtZVVwZGF0ZTABEi8KDWNvbm5lY3RUb0dhbWUSDy5Db25u",
          "ZWN0UmVxdWVzdBoLLkdhbWVVcGRhdGUwARIwCglzdGFydEdhbWUSES5TdGFy",
          "dEdhbWVSZXF1ZXN0GhAuQWNrbm93bGVkZ2VtZW50EiUKCnN1Ym1pdE1vdmUS",
          "BS5Nb3ZlGhAuQWNrbm93bGVkZ2VtZW50Ei4KCGRpc3Byb3ZlEhAuRGlzcHJv",
          "dmVSZXF1ZXN0GhAuQWNrbm93bGVkZ2VtZW50Ei8KDnJlcXVlc3RIaXN0b3J5",
          "Eg8uSGlzdG9yeVJlcXVlc3QaDC5HYW1lSGlzdG9yeRIqCgZhY2N1c2USCy5B",
          "Y2N1c2F0aW9uGhMuQWNjdXNhdGlvblJlc3BvbnNlEjIKCmRpc2Nvbm5lY3QS",
          "Ei5EaXNjb25uZWN0UmVxdWVzdBoQLkFja25vd2xlZGdlbWVudGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateGameRequest), global::CreateGameRequest.Parser, new[]{ "PlayerID", "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ConnectRequest), global::ConnectRequest.Parser, new[]{ "PlayerID", "Name", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StartGameRequest), global::StartGameRequest.Parser, new[]{ "PlayerID", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Move), global::Move.Parser, new[]{ "PlayerID", "Location", "Suspect", "Weapon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DisproveRequest), global::DisproveRequest.Parser, new[]{ "PlayerID", "GameID", "Card", "DisprovingCharacter" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HistoryRequest), global::HistoryRequest.Parser, new[]{ "PlayerID", "GameID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerCharacter), global::PlayerCharacter.Parser, new[]{ "PlayerID", "Character", "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitiateGame), global::InitiateGame.Parser, new[]{ "Cards", "Characters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PromptToDisprove), global::PromptToDisprove.Parser, new[]{ "Cards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerTurn), global::PlayerTurn.Parser, new[]{ "PlayerID", "Room", "Suspect", "Weapon", "DisprovingPlayer", "Location" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameUpdate), global::GameUpdate.Parser, new[]{ "GameID", "PlayerID", "Number", "Type", "Initiate", "Prompt", "Turn", "Disprove" }, null, new[]{ typeof(global::GameUpdate.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameHistory), global::GameHistory.Parser, new[]{ "Updates" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Acknowledgement), global::Acknowledgement.Parser, new[]{ "Success", "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Accusation), global::Accusation.Parser, new[]{ "PlayerId", "IsAccusing", "Accusing" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccusationResponse), global::AccusationResponse.Parser, new[]{ "Correct" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DisconnectRequest), global::DisconnectRequest.Parser, new[]{ "PlayerId" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// CM_001
/// </summary>
public sealed partial class CreateGameRequest : pb::IMessage<CreateGameRequest> {
  private static readonly pb::MessageParser<CreateGameRequest> _parser = new pb::MessageParser<CreateGameRequest>(() => new CreateGameRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateGameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateGameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateGameRequest(CreateGameRequest other) : this() {
    playerID_ = other.playerID_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateGameRequest Clone() {
    return new CreateGameRequest(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateGameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateGameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateGameRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// CM_002
/// </summary>
public sealed partial class ConnectRequest : pb::IMessage<ConnectRequest> {
  private static readonly pb::MessageParser<ConnectRequest> _parser = new pb::MessageParser<ConnectRequest>(() => new ConnectRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ConnectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectRequest(ConnectRequest other) : this() {
    playerID_ = other.playerID_;
    name_ = other.name_;
    gameID_ = other.gameID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectRequest Clone() {
    return new ConnectRequest(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 3;
  private int gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ConnectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ConnectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (Name != other.Name) return false;
    if (GameID != other.GameID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (GameID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GameID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ConnectRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// CM_003
/// </summary>
public sealed partial class StartGameRequest : pb::IMessage<StartGameRequest> {
  private static readonly pb::MessageParser<StartGameRequest> _parser = new pb::MessageParser<StartGameRequest>(() => new StartGameRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StartGameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartGameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartGameRequest(StartGameRequest other) : this() {
    playerID_ = other.playerID_;
    gameID_ = other.gameID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartGameRequest Clone() {
    return new StartGameRequest(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private int gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StartGameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StartGameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (GameID != other.GameID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GameID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StartGameRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// CM_004
/// </summary>
public sealed partial class Move : pb::IMessage<Move> {
  private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Move> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Move() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Move(Move other) : this() {
    playerID_ = other.playerID_;
    location_ = other.location_;
    suspect_ = other.suspect_;
    weapon_ = other.weapon_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Move Clone() {
    return new Move(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 2;
  private int location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  /// <summary>Field number for the "suspect" field.</summary>
  public const int SuspectFieldNumber = 3;
  private int suspect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Suspect {
    get { return suspect_; }
    set {
      suspect_ = value;
    }
  }

  /// <summary>Field number for the "weapon" field.</summary>
  public const int WeaponFieldNumber = 4;
  private int weapon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Weapon {
    get { return weapon_; }
    set {
      weapon_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Move);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Move other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (Location != other.Location) return false;
    if (Suspect != other.Suspect) return false;
    if (Weapon != other.Weapon) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Location != 0) hash ^= Location.GetHashCode();
    if (Suspect != 0) hash ^= Suspect.GetHashCode();
    if (Weapon != 0) hash ^= Weapon.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (Location != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Location);
    }
    if (Suspect != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Suspect);
    }
    if (Weapon != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Weapon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Location != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
    }
    if (Suspect != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Suspect);
    }
    if (Weapon != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weapon);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Move other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Location != 0) {
      Location = other.Location;
    }
    if (other.Suspect != 0) {
      Suspect = other.Suspect;
    }
    if (other.Weapon != 0) {
      Weapon = other.Weapon;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          Location = input.ReadInt32();
          break;
        }
        case 24: {
          Suspect = input.ReadInt32();
          break;
        }
        case 32: {
          Weapon = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// CM_005
/// </summary>
public sealed partial class DisproveRequest : pb::IMessage<DisproveRequest> {
  private static readonly pb::MessageParser<DisproveRequest> _parser = new pb::MessageParser<DisproveRequest>(() => new DisproveRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DisproveRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DisproveRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DisproveRequest(DisproveRequest other) : this() {
    playerID_ = other.playerID_;
    gameID_ = other.gameID_;
    card_ = other.card_;
    disprovingCharacter_ = other.disprovingCharacter_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DisproveRequest Clone() {
    return new DisproveRequest(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private int gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private int card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "disprovingCharacter" field.</summary>
  public const int DisprovingCharacterFieldNumber = 4;
  private int disprovingCharacter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DisprovingCharacter {
    get { return disprovingCharacter_; }
    set {
      disprovingCharacter_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DisproveRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DisproveRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (GameID != other.GameID) return false;
    if (Card != other.Card) return false;
    if (DisprovingCharacter != other.DisprovingCharacter) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (Card != 0) hash ^= Card.GetHashCode();
    if (DisprovingCharacter != 0) hash ^= DisprovingCharacter.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GameID);
    }
    if (Card != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Card);
    }
    if (DisprovingCharacter != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DisprovingCharacter);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (Card != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
    }
    if (DisprovingCharacter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisprovingCharacter);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DisproveRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.Card != 0) {
      Card = other.Card;
    }
    if (other.DisprovingCharacter != 0) {
      DisprovingCharacter = other.DisprovingCharacter;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          GameID = input.ReadInt32();
          break;
        }
        case 24: {
          Card = input.ReadInt32();
          break;
        }
        case 32: {
          DisprovingCharacter = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// CM_006
/// </summary>
public sealed partial class HistoryRequest : pb::IMessage<HistoryRequest> {
  private static readonly pb::MessageParser<HistoryRequest> _parser = new pb::MessageParser<HistoryRequest>(() => new HistoryRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HistoryRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryRequest(HistoryRequest other) : this() {
    playerID_ = other.playerID_;
    gameID_ = other.gameID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HistoryRequest Clone() {
    return new HistoryRequest(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private int gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HistoryRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HistoryRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (GameID != other.GameID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GameID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HistoryRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          GameID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerCharacter : pb::IMessage<PlayerCharacter> {
  private static readonly pb::MessageParser<PlayerCharacter> _parser = new pb::MessageParser<PlayerCharacter>(() => new PlayerCharacter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerCharacter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerCharacter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerCharacter(PlayerCharacter other) : this() {
    playerID_ = other.playerID_;
    character_ = other.character_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerCharacter Clone() {
    return new PlayerCharacter(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "character" field.</summary>
  public const int CharacterFieldNumber = 2;
  private int character_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Character {
    get { return character_; }
    set {
      character_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerCharacter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerCharacter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (Character != other.Character) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Character != 0) hash ^= Character.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (Character != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Character);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Character != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Character);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerCharacter other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Character != 0) {
      Character = other.Character;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          Character = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// SM_001A
/// </summary>
public sealed partial class InitiateGame : pb::IMessage<InitiateGame> {
  private static readonly pb::MessageParser<InitiateGame> _parser = new pb::MessageParser<InitiateGame>(() => new InitiateGame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InitiateGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitiateGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitiateGame(InitiateGame other) : this() {
    cards_ = other.cards_.Clone();
    characters_ = other.characters_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitiateGame Clone() {
    return new InitiateGame(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "characters" field.</summary>
  public const int CharactersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerCharacter> _repeated_characters_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerCharacter.Parser);
  private readonly pbc::RepeatedField<global::PlayerCharacter> characters_ = new pbc::RepeatedField<global::PlayerCharacter>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerCharacter> Characters {
    get { return characters_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InitiateGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InitiateGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    if(!characters_.Equals(other.characters_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    hash ^= characters_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
    characters_.WriteTo(output, _repeated_characters_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    size += characters_.CalculateSize(_repeated_characters_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InitiateGame other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
    characters_.Add(other.characters_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 18: {
          characters_.AddEntriesFrom(input, _repeated_characters_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// SM_001B
/// </summary>
public sealed partial class PromptToDisprove : pb::IMessage<PromptToDisprove> {
  private static readonly pb::MessageParser<PromptToDisprove> _parser = new pb::MessageParser<PromptToDisprove>(() => new PromptToDisprove());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PromptToDisprove> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PromptToDisprove() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PromptToDisprove(PromptToDisprove other) : this() {
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PromptToDisprove Clone() {
    return new PromptToDisprove(this);
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_cards_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PromptToDisprove);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PromptToDisprove other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PromptToDisprove other) {
    if (other == null) {
      return;
    }
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// SM_001C
/// </summary>
public sealed partial class PlayerTurn : pb::IMessage<PlayerTurn> {
  private static readonly pb::MessageParser<PlayerTurn> _parser = new pb::MessageParser<PlayerTurn>(() => new PlayerTurn());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerTurn> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTurn() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTurn(PlayerTurn other) : this() {
    playerID_ = other.playerID_;
    room_ = other.room_;
    suspect_ = other.suspect_;
    weapon_ = other.weapon_;
    disprovingPlayer_ = other.disprovingPlayer_;
    location_ = other.location_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTurn Clone() {
    return new PlayerTurn(this);
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 1;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 2;
  private int room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "suspect" field.</summary>
  public const int SuspectFieldNumber = 3;
  private int suspect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Suspect {
    get { return suspect_; }
    set {
      suspect_ = value;
    }
  }

  /// <summary>Field number for the "weapon" field.</summary>
  public const int WeaponFieldNumber = 4;
  private int weapon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Weapon {
    get { return weapon_; }
    set {
      weapon_ = value;
    }
  }

  /// <summary>Field number for the "disprovingPlayer" field.</summary>
  public const int DisprovingPlayerFieldNumber = 5;
  private int disprovingPlayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DisprovingPlayer {
    get { return disprovingPlayer_; }
    set {
      disprovingPlayer_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 6;
  private int location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerTurn);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerTurn other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerID != other.PlayerID) return false;
    if (Room != other.Room) return false;
    if (Suspect != other.Suspect) return false;
    if (Weapon != other.Weapon) return false;
    if (DisprovingPlayer != other.DisprovingPlayer) return false;
    if (Location != other.Location) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Room != 0) hash ^= Room.GetHashCode();
    if (Suspect != 0) hash ^= Suspect.GetHashCode();
    if (Weapon != 0) hash ^= Weapon.GetHashCode();
    if (DisprovingPlayer != 0) hash ^= DisprovingPlayer.GetHashCode();
    if (Location != 0) hash ^= Location.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerID);
    }
    if (Room != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Room);
    }
    if (Suspect != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Suspect);
    }
    if (Weapon != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Weapon);
    }
    if (DisprovingPlayer != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(DisprovingPlayer);
    }
    if (Location != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Location);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Room != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Room);
    }
    if (Suspect != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Suspect);
    }
    if (Weapon != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weapon);
    }
    if (DisprovingPlayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisprovingPlayer);
    }
    if (Location != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerTurn other) {
    if (other == null) {
      return;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Room != 0) {
      Room = other.Room;
    }
    if (other.Suspect != 0) {
      Suspect = other.Suspect;
    }
    if (other.Weapon != 0) {
      Weapon = other.Weapon;
    }
    if (other.DisprovingPlayer != 0) {
      DisprovingPlayer = other.DisprovingPlayer;
    }
    if (other.Location != 0) {
      Location = other.Location;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 16: {
          Room = input.ReadInt32();
          break;
        }
        case 24: {
          Suspect = input.ReadInt32();
          break;
        }
        case 32: {
          Weapon = input.ReadInt32();
          break;
        }
        case 40: {
          DisprovingPlayer = input.ReadInt32();
          break;
        }
        case 48: {
          Location = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// SM_001
/// </summary>
public sealed partial class GameUpdate : pb::IMessage<GameUpdate> {
  private static readonly pb::MessageParser<GameUpdate> _parser = new pb::MessageParser<GameUpdate>(() => new GameUpdate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameUpdate(GameUpdate other) : this() {
    gameID_ = other.gameID_;
    playerID_ = other.playerID_;
    number_ = other.number_;
    type_ = other.type_;
    initiate_ = other.initiate_ != null ? other.initiate_.Clone() : null;
    prompt_ = other.prompt_ != null ? other.prompt_.Clone() : null;
    turn_ = other.turn_ != null ? other.turn_.Clone() : null;
    disprove_ = other.disprove_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameUpdate Clone() {
    return new GameUpdate(this);
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 1;
  private int gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "playerID" field.</summary>
  public const int PlayerIDFieldNumber = 2;
  private int playerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerID {
    get { return playerID_; }
    set {
      playerID_ = value;
    }
  }

  /// <summary>Field number for the "number" field.</summary>
  public const int NumberFieldNumber = 3;
  private int number_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Number {
    get { return number_; }
    set {
      number_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private global::GameUpdate.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameUpdate.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "initiate" field.</summary>
  public const int InitiateFieldNumber = 5;
  private global::InitiateGame initiate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InitiateGame Initiate {
    get { return initiate_; }
    set {
      initiate_ = value;
    }
  }

  /// <summary>Field number for the "prompt" field.</summary>
  public const int PromptFieldNumber = 6;
  private global::PromptToDisprove prompt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PromptToDisprove Prompt {
    get { return prompt_; }
    set {
      prompt_ = value;
    }
  }

  /// <summary>Field number for the "turn" field.</summary>
  public const int TurnFieldNumber = 7;
  private global::PlayerTurn turn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerTurn Turn {
    get { return turn_; }
    set {
      turn_ = value;
    }
  }

  /// <summary>Field number for the "disprove" field.</summary>
  public const int DisproveFieldNumber = 8;
  private int disprove_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Disprove {
    get { return disprove_; }
    set {
      disprove_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameID != other.GameID) return false;
    if (PlayerID != other.PlayerID) return false;
    if (Number != other.Number) return false;
    if (Type != other.Type) return false;
    if (!object.Equals(Initiate, other.Initiate)) return false;
    if (!object.Equals(Prompt, other.Prompt)) return false;
    if (!object.Equals(Turn, other.Turn)) return false;
    if (Disprove != other.Disprove) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
    if (Number != 0) hash ^= Number.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (initiate_ != null) hash ^= Initiate.GetHashCode();
    if (prompt_ != null) hash ^= Prompt.GetHashCode();
    if (turn_ != null) hash ^= Turn.GetHashCode();
    if (Disprove != 0) hash ^= Disprove.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GameID);
    }
    if (PlayerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PlayerID);
    }
    if (Number != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Number);
    }
    if (Type != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
    if (initiate_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Initiate);
    }
    if (prompt_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Prompt);
    }
    if (turn_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Turn);
    }
    if (Disprove != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Disprove);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameID);
    }
    if (PlayerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
    }
    if (Number != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (initiate_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Initiate);
    }
    if (prompt_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
    }
    if (turn_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Turn);
    }
    if (Disprove != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Disprove);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameUpdate other) {
    if (other == null) {
      return;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.PlayerID != 0) {
      PlayerID = other.PlayerID;
    }
    if (other.Number != 0) {
      Number = other.Number;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.initiate_ != null) {
      if (initiate_ == null) {
        Initiate = new global::InitiateGame();
      }
      Initiate.MergeFrom(other.Initiate);
    }
    if (other.prompt_ != null) {
      if (prompt_ == null) {
        Prompt = new global::PromptToDisprove();
      }
      Prompt.MergeFrom(other.Prompt);
    }
    if (other.turn_ != null) {
      if (turn_ == null) {
        Turn = new global::PlayerTurn();
      }
      Turn.MergeFrom(other.Turn);
    }
    if (other.Disprove != 0) {
      Disprove = other.Disprove;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GameID = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerID = input.ReadInt32();
          break;
        }
        case 24: {
          Number = input.ReadInt32();
          break;
        }
        case 32: {
          Type = (global::GameUpdate.Types.Type) input.ReadEnum();
          break;
        }
        case 42: {
          if (initiate_ == null) {
            Initiate = new global::InitiateGame();
          }
          input.ReadMessage(Initiate);
          break;
        }
        case 50: {
          if (prompt_ == null) {
            Prompt = new global::PromptToDisprove();
          }
          input.ReadMessage(Prompt);
          break;
        }
        case 58: {
          if (turn_ == null) {
            Turn = new global::PlayerTurn();
          }
          input.ReadMessage(Turn);
          break;
        }
        case 64: {
          Disprove = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the GameUpdate message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("INITIATE")] Initiate = 0,
      [pbr::OriginalName("PROMPT")] Prompt = 1,
      [pbr::OriginalName("TURN")] Turn = 2,
      [pbr::OriginalName("CONNECT")] Connect = 3,
      [pbr::OriginalName("NEXTTURN")] Nextturn = 4,
      [pbr::OriginalName("DISPROVE")] Disprove = 5,
    }

  }
  #endregion

}

public sealed partial class GameHistory : pb::IMessage<GameHistory> {
  private static readonly pb::MessageParser<GameHistory> _parser = new pb::MessageParser<GameHistory>(() => new GameHistory());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameHistory> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameHistory() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameHistory(GameHistory other) : this() {
    updates_ = other.updates_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameHistory Clone() {
    return new GameHistory(this);
  }

  /// <summary>Field number for the "updates" field.</summary>
  public const int UpdatesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GameUpdate> _repeated_updates_codec
      = pb::FieldCodec.ForMessage(10, global::GameUpdate.Parser);
  private readonly pbc::RepeatedField<global::GameUpdate> updates_ = new pbc::RepeatedField<global::GameUpdate>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GameUpdate> Updates {
    get { return updates_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameHistory);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameHistory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!updates_.Equals(other.updates_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= updates_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    updates_.WriteTo(output, _repeated_updates_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += updates_.CalculateSize(_repeated_updates_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameHistory other) {
    if (other == null) {
      return;
    }
    updates_.Add(other.updates_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          updates_.AddEntriesFrom(input, _repeated_updates_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Acknowledgement : pb::IMessage<Acknowledgement> {
  private static readonly pb::MessageParser<Acknowledgement> _parser = new pb::MessageParser<Acknowledgement>(() => new Acknowledgement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Acknowledgement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Acknowledgement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Acknowledgement(Acknowledgement other) : this() {
    success_ = other.success_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Acknowledgement Clone() {
    return new Acknowledgement(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Acknowledgement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Acknowledgement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Acknowledgement other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Accusation : pb::IMessage<Accusation> {
  private static readonly pb::MessageParser<Accusation> _parser = new pb::MessageParser<Accusation>(() => new Accusation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Accusation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Accusation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Accusation(Accusation other) : this() {
    playerId_ = other.playerId_;
    isAccusing_ = other.isAccusing_;
    accusing_ = other.accusing_ != null ? other.accusing_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Accusation Clone() {
    return new Accusation(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private int playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "isAccusing" field.</summary>
  public const int IsAccusingFieldNumber = 2;
  private bool isAccusing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsAccusing {
    get { return isAccusing_; }
    set {
      isAccusing_ = value;
    }
  }

  /// <summary>Field number for the "accusing" field.</summary>
  public const int AccusingFieldNumber = 3;
  private global::Move accusing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Move Accusing {
    get { return accusing_; }
    set {
      accusing_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Accusation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Accusation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (IsAccusing != other.IsAccusing) return false;
    if (!object.Equals(Accusing, other.Accusing)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (IsAccusing != false) hash ^= IsAccusing.GetHashCode();
    if (accusing_ != null) hash ^= Accusing.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerId);
    }
    if (IsAccusing != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsAccusing);
    }
    if (accusing_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Accusing);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
    }
    if (IsAccusing != false) {
      size += 1 + 1;
    }
    if (accusing_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Accusing);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Accusation other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.IsAccusing != false) {
      IsAccusing = other.IsAccusing;
    }
    if (other.accusing_ != null) {
      if (accusing_ == null) {
        Accusing = new global::Move();
      }
      Accusing.MergeFrom(other.Accusing);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt32();
          break;
        }
        case 16: {
          IsAccusing = input.ReadBool();
          break;
        }
        case 26: {
          if (accusing_ == null) {
            Accusing = new global::Move();
          }
          input.ReadMessage(Accusing);
          break;
        }
      }
    }
  }

}

public sealed partial class AccusationResponse : pb::IMessage<AccusationResponse> {
  private static readonly pb::MessageParser<AccusationResponse> _parser = new pb::MessageParser<AccusationResponse>(() => new AccusationResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccusationResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccusationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccusationResponse(AccusationResponse other) : this() {
    correct_ = other.correct_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccusationResponse Clone() {
    return new AccusationResponse(this);
  }

  /// <summary>Field number for the "correct" field.</summary>
  public const int CorrectFieldNumber = 1;
  private bool correct_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Correct {
    get { return correct_; }
    set {
      correct_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccusationResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccusationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Correct != other.Correct) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Correct != false) hash ^= Correct.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Correct != false) {
      output.WriteRawTag(8);
      output.WriteBool(Correct);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Correct != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccusationResponse other) {
    if (other == null) {
      return;
    }
    if (other.Correct != false) {
      Correct = other.Correct;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Correct = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class DisconnectRequest : pb::IMessage<DisconnectRequest> {
  private static readonly pb::MessageParser<DisconnectRequest> _parser = new pb::MessageParser<DisconnectRequest>(() => new DisconnectRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DisconnectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NetworkReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DisconnectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DisconnectRequest(DisconnectRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DisconnectRequest Clone() {
    return new DisconnectRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private int playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DisconnectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DisconnectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DisconnectRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
